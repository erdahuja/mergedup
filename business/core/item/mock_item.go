// Code generated by MockGen. DO NOT EDIT.
// Source: storer.go

// Package item is a generated GoMock package.
package item

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorer) Create(ctx context.Context, itm Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, itm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorerMockRecorder) Create(ctx, itm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorer)(nil).Create), ctx, itm)
}

// Query mocks base method.
func (m *MockStorer) Query(ctx context.Context, filter QueryFilter) ([]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, filter)
	ret0, _ := ret[0].([]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStorerMockRecorder) Query(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStorer)(nil).Query), ctx, filter)
}

// QueryByID mocks base method.
func (m *MockStorer) QueryByID(ctx context.Context, itemID int64) (Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByID", ctx, itemID)
	ret0, _ := ret[0].(Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByID indicates an expected call of QueryByID.
func (mr *MockStorerMockRecorder) QueryByID(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByID", reflect.TypeOf((*MockStorer)(nil).QueryByID), ctx, itemID)
}

// Update mocks base method.
func (m *MockStorer) Update(ctx context.Context, itm Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, itm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorerMockRecorder) Update(ctx, itm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorer)(nil).Update), ctx, itm)
}

// WithinTran mocks base method.
func (m *MockStorer) WithinTran(ctx context.Context, fn func(Storer) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTran", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTran indicates an expected call of WithinTran.
func (mr *MockStorerMockRecorder) WithinTran(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTran", reflect.TypeOf((*MockStorer)(nil).WithinTran), ctx, fn)
}
